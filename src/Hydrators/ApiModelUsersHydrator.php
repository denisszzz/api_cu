<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorException;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class ApiModelUsersHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoDB\BSON\ObjectId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['nickname']) || (! empty($this->class->fieldMappings['nickname']['nullable']) && array_key_exists('nickname', $data))) {
            $value = $data['nickname'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['nickname']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['nickname']->setValue($document, $return);
            $hydratedData['nickname'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email']) || (! empty($this->class->fieldMappings['email']['nullable']) && array_key_exists('email', $data))) {
            $value = $data['email'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['email']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name']) || (! empty($this->class->fieldMappings['name']['nullable']) && array_key_exists('name', $data))) {
            $value = $data['name'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['name']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['avatar_color']) || (! empty($this->class->fieldMappings['avatar_color']['nullable']) && array_key_exists('avatar_color', $data))) {
            $value = $data['avatar_color'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['avatar_color']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['avatar_color']->setValue($document, $return);
            $hydratedData['avatar_color'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['avatar_image']) || (! empty($this->class->fieldMappings['avatar_image']['nullable']) && array_key_exists('avatar_image', $data))) {
            $value = $data['avatar_image'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['avatar_image']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['avatar_image']->setValue($document, $return);
            $hydratedData['avatar_image'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['gender']) || (! empty($this->class->fieldMappings['gender']['nullable']) && array_key_exists('gender', $data))) {
            $value = $data['gender'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['gender']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['gender']->setValue($document, $return);
            $hydratedData['gender'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['rating_counter']) || (! empty($this->class->fieldMappings['rating_counter']['nullable']) && array_key_exists('rating_counter', $data))) {
            $value = $data['rating_counter'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['rating_counter']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['rating_counter']->setValue($document, $return);
            $hydratedData['rating_counter'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['rating']) ? $data['rating'] : null;

        if ($mongoData !== null && ! is_array($mongoData)) {
            throw HydratorException::associationTypeMismatch('Api\Model\Users', 'rating', 'array', gettype($mongoData));
        }

        $return = $this->dm->getConfiguration()->getPersistentCollectionFactory()->create($this->dm, $this->class->fieldMappings['rating']);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['rating']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['rating']->setValue($document, $return);
        $hydratedData['rating'] = $return;

        /** @Field(type="string") */
        if (isset($data['system_account']) || (! empty($this->class->fieldMappings['system_account']['nullable']) && array_key_exists('system_account', $data))) {
            $value = $data['system_account'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['system_account']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['system_account']->setValue($document, $return);
            $hydratedData['system_account'] = $return;
        }
        return $hydratedData;
    }
}